<?php
require("../vendor/autoload.php");

use Garphild\SettingsManager\Adapters\JsonFileSettingsAdapter;
use Garphild\SettingsManager\Adapters\JsonFileStructureAdapter;
use Garphild\SettingsManager\Interfaces\iSettingsAdapter;
use Garphild\SettingsManager\SettingsManager;
use PHPUnit\Framework\TestCase;

echo "\n\nSettingsManagerTest\n";

/**
 * @covers Garphild\SettingsManager\SettingsManager
 */
class SettingsManagerAddItemsTest extends TestCase
{
  public $path = './mocks';
  public $structureFileName = 'defaultMultiple.json';
  public $groupFileName = 'defaultMultipleSettingsGroup.json';
  public $userFileName = 'defaultMultipleSettings.json';
  public $groupID = 'guest';
  public $structureAdapter;
  public $groupAdapter;
  public $userAdapter;
  public $manager;

  function setUp(): void
  {
    parent::setUp(); // TODO: Change the autogenerated stub
    $this->structureAdapter = new JsonFileStructureAdapter($this->path, $this->structureFileName);
    $this->groupAdapter = new JsonFileSettingsAdapter($this->path, $this->groupFileName);
    $this->userAdapter = new JsonFileSettingsAdapter($this->path, $this->userFileName);
    $this->manager = new SettingsManager(
    'default',
      $this->structureAdapter,
      [$this->groupID => $this->groupAdapter],
      $this->userAdapter
    );
  }


  /**
   * Нельзя добавлять пользовательское значение, если оно не описано в структуре
   *
   * @covers \Garphild\SettingsManager\SettingsManager::user
   */
  public function testUserAddItemWrong()
  {
    $this->expectException(Garphild\SettingsManager\Errors\PropertyNotDescriptedInStructureException::class);
    $this->manager->user()->setValue('testSingleNotExists', "2");
  }

  /**
   * Нельзя добавлять значение для группы, если группы нету в списке
   *
   * @covers \Garphild\SettingsManager\SettingsManager::groups
   */
  public function testGroupAddItemWrong()
  {
    $this->expectException(Garphild\SettingsManager\Errors\NoAdapterException::class);
    $this->manager->groups()->setValue('testSingleNotExists', "2", "absentGroup");
  }

  /**
   * Нельзя добавлять значение для группы, если свойство не описано в структуре
   *
   * @covers \Garphild\SettingsManager\SettingsManager::groups
   */
  public function testGroupAddItemWrong2()
  {
    $this->expectException(Garphild\SettingsManager\Errors\PropertyNotDescriptedInStructureException::class);
    $this->manager->groups()->setValue('testSingleNotExists', "2", $this->groupID);
  }

  /**
   * Успешное добавление значения для пользователя
   *
   * @covers \Garphild\SettingsManager\SettingsManager::user
   */
  public function testUserAddItemSuccess()
  {
    // Проверяем что свойства нет
    $have = $this->manager->user()->haveItem('testSingleForUserAdd');
    $this->assertFalse($have);
    $ret = $this->manager->user()->setValue('testSingleForUserAdd', "2");
    $this->assertInstanceOf(iSettingsAdapter::class, $ret);
    $have = $this->manager->user()->haveItem('testSingleForUserAdd');
    $this->assertTrue($have);
    $res = $this->manager->user()->getValue('testSingleForUserAdd', true);
    $this->assertSame("2", $res);
    $res = $this->manager->user()->getValue('testSingleForUserAdd', false);
    $this->assertSame("2", $res);
    $res = $this->manager->user()->getValue('testSingleForUserAdd');
    $this->assertSame("2", $res);
    $res = $this->manager->structure()->getValue('testSingleForUserAdd');
    $this->assertNotSame("2", $res);
  }

  /**
   * Успешное добавление значения для группы
   *
   * @covers \Garphild\SettingsManager\SettingsManager::groups
   */
  public function testGroupAddItemSuccess()
  {
    // Проверяем что свойства нет
    $have = $this->manager->groups()->haveItem('testSingleForGroupAdd');
    $this->assertFalse($have);
    $ret = $this->manager->groups()->setValue('testSingleForGroupAdd', "1", $this->groupID);
    $this->assertInstanceOf(iSettingsAdapter::class, $ret);
    $have = $this->manager->groups()->haveItem('testSingleForGroupAdd');
    $this->assertTrue($have);
    $res = $this->manager->groups()->getValue('testSingleForGroupAdd', $this->groupID);
    $this->assertSame("1", $res);
    $res = $this->manager->groups()->getValue('testSingleForGroupAdd', $this->groupID, false);
    $this->assertSame("1", $res);
    $res = $this->manager->groups()->getValue('testSingleForGroupAdd');
    $this->assertSame("1", $res);
    $res = $this->manager->groups()->getValue('testSingleForGroupAdd');
    $this->assertSame("1", $res);
    $res = $this->manager->user()->haveItem('testSingleForGroupAdd');
    $this->assertFalse($res);
  }
}
