<?php
require("../vendor/autoload.php");

use Garphild\SettingsManager\Adapters\JsonFileSettingsAdapter;
use Garphild\SettingsManager\Adapters\JsonFileStructureAdapter;
use Garphild\SettingsManager\SettingsManager;
use PHPUnit\Framework\TestCase;

/**
 * @covers Garphild\SettingsManager\SettingsManager
 */
class SettingsManagerGetItemsTest extends TestCase
{
  public $path = './mocks';
  public $structureFileName = 'defaultMultiple.json';
  public $groupFileName = 'defaultMultipleSettingsGroup.json';
  public $userFileName = 'defaultMultipleSettings.json';
  public $groupID = 'guest';
  public $structureAdapter;
  public $groupAdapter;
  public $userAdapter;
  public $manager;

  function setUp(): void
  {
    parent::setUp(); // TODO: Change the autogenerated stub
    $this->structureAdapter = new JsonFileStructureAdapter($this->path, $this->structureFileName);
    $this->groupAdapter = new JsonFileSettingsAdapter($this->path, $this->groupFileName);
    $this->userAdapter = new JsonFileSettingsAdapter($this->path, $this->userFileName);
    $this->manager = new SettingsManager(
    'default',
      $this->structureAdapter,
      [$this->groupID => $this->groupAdapter],
      $this->userAdapter
    );
  }


  /**
   * Получение не описанного в структуре свойства должно вызывать исключение
   *
   * @covers \Garphild\SettingsManager\SettingsManager::getValue
   */
  public function testGetItemWrong() {
    $this->expectException(\Garphild\SettingsManager\Errors\PropertyNotExistException::class);
    $this->manager->getValue("notDescriptedValue");
  }

  /**
   * Проверяем взятия значений в разных вариациях
   *
   * @covers \Garphild\SettingsManager\SettingsManager::getValue
   */
  public function testGetItem()
  {
    // Значение присутствует в пользователе и в группе
    $value = $this->manager->getValue('testSingle');
    $this->assertSame("2", $value);
    // Не должно быть равно значению из группы
    $value = $this->manager->getValue('testSingle');
    $this->assertNotSame("1", $value);
    // Не должно быть равно значению из структуры
    $value = $this->manager->getValue('testSingle');
    $this->assertNotSame("0", $value);

    // Значение присутствует только в группе
    $value = $this->manager->getValue('testSingleForGroup');
    $this->assertSame("1", $value);
    // Не должно быть равно значению из пользователя
    $value = $this->manager->getValue('testSingleForGroup');
    $this->assertNotSame("2", $value);
    // Не должно быть равно значению из структуры
    $value = $this->manager->getValue('testSingleForGroup');
    $this->assertNotSame("0", $value);

    // Значение присутствует только в пользователе
    $value = $this->manager->getValue('testSingleForUser');
    $this->assertSame("2", $value);
    // Не должно быть равно значению из группы
    $value = $this->manager->getValue('testSingleForUser');
    $this->assertNotSame("1", $value);
    // Не должно быть равно значению из структуры
    $value = $this->manager->getValue('testSingleForUser');
    $this->assertNotSame("0", $value);

    // Значение присутствует только в структуре
    $value = $this->manager->getValue('testSingleOnlyStructure');
    $this->assertSame("0", $value);
    // Не должно быть равно значению из группы
    $value = $this->manager->getValue('testSingleOnlyStructure');
    $this->assertNotSame("2", $value);
    // Не должно быть равно значению из пользователя
    $value = $this->manager->getValue('testSingleOnlyStructure');
    $this->assertNotSame("1", $value);
  }

  /**
   * Тестируем взятие названий параметров
   *
   * @covers \Garphild\SettingsManager\SettingsManager::getNames
   */
  public function testGetItemNames()
  {
    $names = $this->manager->getNames();
    $this->assertSame([
      'testSingle',
      'testSingleForGroup',
      'testSingleForUser',
      'testSingleForUserAdd',
      'testSingleForGroupAdd',
      'testSingleOnlyStructure',
    ], $names);
  }

  /**
   * Тестируем взятие названий параметров для внешних источников
   *
   * @covers \Garphild\SettingsManager\SettingsManager::getNames
   */
  public function testGetItemNamesForPublic()
  {
    $names = $this->manager->getNamesForPublic();
    $this->assertSame([
//      'testSingle',
      'testSingleForGroup',
      'testSingleForUser',
      'testSingleForUserAdd',
      'testSingleForGroupAdd',
      'testSingleOnlyStructure',
    ], $names);
  }
}
